# -*- coding: utf-8 -*-
"""Gigzit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P1nAnt4_9vL5sPJqTnpRz9rWja4Xrvdh
"""

import cv2
import numpy as np

# Load Raw Image
def load_raw_image(image_path):
    image = cv2.imread(image_path)
    return image

# Pre-processing (Optional)
def preprocess_image(image):
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return gray

# Load Labeled Image
def load_labeled_image(labeled_image_path):
    labeled_image = cv2.imread(labeled_image_path)
    return labeled_image

# Label Integration
def integrate_labeled_image(raw_image, labeled_image):
    # Get the dimensions of the raw image
    if len(raw_image.shape) == 2:  # Grayscale image
        height, width = raw_image.shape
        channels = 1
    else:  # Color image
        height, width, channels = raw_image.shape

    # Create a labeled image with the same dimensions
    labeled_image_integrated = np.zeros((height, width), dtype=np.uint8)

    # Iterate over each pixel in the raw image
    for i in range(height):
        for j in range(width):
            # Get the pixel value from the labeled image
            pixel_value = labeled_image[i, j]

            # Assign the corresponding class label
            if np.array_equal(pixel_value, (0, 0, 0)):  # Black pixel: Class 1 (French manicure)
                labeled_image_integrated[i, j] = 1
            elif np.array_equal(pixel_value, (255, 255, 255)):  # White pixel: Class 2 (Acrylic)
                labeled_image_integrated[i, j] = 2
            elif np.array_equal(pixel_value, (128, 128, 128)):  # Gray pixel: Class 3 (Bare nail)
                labeled_image_integrated[i, j] = 3
            else:
                labeled_image_integrated[i, j] = 0  # Unknown class

    return labeled_image_integrated

# Interactive Labeling (Optional)
def interactive_labeling(raw_image):
    # Create a window for interactive labeling
    cv2.namedWindow("Interactive Labeling")
    cv2.setMouseCallback("Interactive Labeling", interactive_labeling_callback, raw_image)

    # Display the raw image
    cv2.imshow("Interactive Labeling", raw_image)

    # Wait for user input
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def interactive_labeling_callback(event, x, y, flags, param):
    # Get the pixel value at the clicked location
    pixel_value = param[y, x]

    # Assign the corresponding class label
    if event == cv2.EVENT_LBUTTONDOWN:
        if np.array_equal(pixel_value, (0, 0, 0)):  # Black pixel: Class 1 (French manicure)
            param[y, x] = (255, 0, 0)  # Red pixel: Class 1
        elif np.array_equal(pixel_value, (255, 255, 255)):  # White pixel: Class 2 (Acrylic)
            param[y, x] = (0, 255, 0)  # Green pixel: Class 2
        elif np.array_equal(pixel_value, (128, 128, 128)):  # Gray pixel: Class 3 (Bare nail)
            param[y, x] = (0, 0, 255)  # Blue pixel: Class 3
        else:
            param[y, x] = (0, 0, 0)  # Black pixel: Unknown class

# Main script
if __name__ == "__main__":
    # Load the raw image
    raw_image_path = "/content/nail.jpg"
    raw_image = load_raw_image(raw_image_path)

    # Pre-process the image (optional)
    raw_image = preprocess_image(raw_image)

    # Load the labeled image
    labeled_image_path = "/content/seg.jpg"
    labeled_image = load_labeled_image(labeled_image_path)

    # Integrate the labeled image
    labeled_image_integrated = integrate_labeled_image(raw_image, labeled_image)

    # Save the labeled image
    cv2.imwrite("labeled_image_integrated.png", labeled_image_integrated)

    # Interactive labeling (optional)
    # interactive_labeling(raw_image)

import cv2
import numpy as np

# Load the raw image
def load_raw_image(image_path):
    image = cv2.imread('/content/nail.jpg')
    return image

# Pre-processing (optional)
def preprocess_image(image):
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return gray

# Load the labeled image
def load_labeled_image(labeled_image_path):
    labeled_image = cv2.imread('/content/seg.jpg')
    return labeled_image

def integrate_labeled_image(raw_image, labeled_image):
    # Get the dimensions of the raw image
    if len(raw_image.shape) == 2:  # Grayscale image
        height, width = raw_image.shape
        channels = 1
    else:  # Color image
        height, width, channels = raw_image.shape

    # Create a labeled image with the same dimensions
    labeled_image_integrated = np.zeros((height, width), dtype=np.uint8)

    # Iterate over each pixel in the raw image
    for i in range(height):
        for j in range(width):
            # Get the pixel value from the labeled image
            pixel_value = labeled_image[i, j]

            # Assign the corresponding class label
            if np.array_equal(pixel_value, (0, 0, 0)):  # Black pixel: Class 1 (French manicure)
                labeled_image_integrated[i, j] = 1
            elif np.array_equal(pixel_value, (255, 255, 255)):  # White pixel: Class 2 (Acrylic)
                labeled_image_integrated[i, j] = 2
            elif np.array_equal(pixel_value, (128, 128, 128)):  # Gray pixel: Class 3 (Bare nail)
                labeled_image_integrated[i, j] = 3
            else:
                labeled_image_integrated[i, j] = 0  # Unknown class

    return labeled_image_integrated

# Interactive labeling (optional)
def interactive_labeling(raw_image):
    # Create a window for interactive labeling
    cv2.namedWindow("Interactive Labeling")
    cv2.setMouseCallback("Interactive Labeling", interactive_labeling_callback)

    # Display the raw image
    cv2.imshow("Interactive Labeling", raw_image)

    # Wait for user input
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def interactive_labeling_callback(event, x, y, flags, param):
    # Get the pixel value at the clicked location
    pixel_value = param[y, x]

    # Assign the corresponding class label
    if event == cv2.EVENT_LBUTTONDOWN:
        if np.array_equal(pixel_value, (0, 0, 0)):  # Black pixel: Class 1 (French manicure)
            param[y, x] = (255, 0, 0)  # Red pixel: Class 1
        elif np.array_equal(pixel_value, (255, 255, 255)):  # White pixel: Class 2 (Acrylic)
            param[y, x] = (0, 255, 0)  # Green pixel: Class 2
        elif np.array_equal(pixel_value, (128, 128, 128)):  # Gray pixel: Class 3 (Bare nail)
            param[y, x] = (0, 0, 255)  # Blue pixel: Class 3
        else:
            param[y, x] = (0, 0, 0)  # Black pixel: Unknown class

# Main script
if __name__ == "__main__":
    # Load the raw image
    raw_image_path = "raw_image.jpg"
    raw_image = load_raw_image(raw_image_path)

    # Pre-process the image (optional)
    raw_image = preprocess_image(raw_image)

    # Load the labeled image
    labeled_image_path = "labeled_image.png"
    labeled_image = load_labeled_image(labeled_image_path)

    # Integrate the labeled image
    labeled_image_integrated = integrate_labeled_image(raw_image, labeled_image)

    # Save the labeled image
    cv2.imwrite("labeled_image_integrated.png", labeled_image_integrated)

    # Interactive labeling (optional)
    # interactive_labeling(raw_image)

